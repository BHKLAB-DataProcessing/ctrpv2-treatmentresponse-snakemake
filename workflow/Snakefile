from damply import dirs as dmpdirs

configfile: "config/pipeline.yaml"

CONTAINER = 'docker://ghcr.io/bhklab-dataprocessing/ctrp-treatmentresponse-snakemake:latest'

storage:
    provider="http"

rule all:
    input:
        tre = expand(
            dmpdirs.RESULTS / "CTRPv{release}_treatmentResponseExperiment.RDS",
            release=config["treatmentResponse"]["rawdata"]["release"],
        ),

rule download_data:
    input:
        storage.http(config["treatmentResponse"]["rawdata"]["url"]),
    output:
        dmpdirs.RAWDATA / "treatmentResponse" / "CTRPv{release}.zip",
    shell:
        """
        mkdir -p $(dirname {output})
        mv {input[0]} {output}
        """

rule preprocessMetadata:
    input:
        tr=dmpdirs.RAWDATA / "treatmentResponse" / "CTRPv{release}.zip",
    output:
        rawSampleMetadata=dmpdirs.METADATA  / "CTRPv{release}_sampleMetadata.tsv",
        rawTreatmentMetadata=dmpdirs.METADATA  / "CTRPv{release}_treatmentMetadata.tsv",
    container:
        CONTAINER
    log:
        dmpdirs.LOGS / "CTRPv{release}_preprocess_Metadata.log",
    script:
        dmpdirs.SCRIPTS / "R" / "preprocessMetadata.R"


rule preprocessTreatmentResponse:
    input:
        tr=dmpdirs.RAWDATA / "treatmentResponse" / "CTRPv{release}.zip",
        treatmentMetadata=dmpdirs.METADATA / "CTRPv{release}_treatmentMetadata.tsv",
        sampleMetadata=dmpdirs.METADATA / "CTRPv{release}_sampleMetadata.tsv",
    container:
        CONTAINER
    output:
        preprocessed_raw=dmpdirs.PROCDATA / "CTRPv{release}_preprocessed_TreatmentResponse_raw.csv",
    log:
        dmpdirs.LOGS / "{release}" / "preprocessTreatmentResponse.log",
    script:
        dmpdirs.SCRIPTS / "R" / "preprocessTreatmentResponse.R"

rule buildTreatmentResponseExperiment:
    input:
        preprocessed_raw=dmpdirs.PROCDATA / "CTRPv{release}_preprocessed_TreatmentResponse_raw.csv",
    output:
        tre=dmpdirs.RESULTS / "CTRPv{release}_treatmentResponseExperiment.RDS",
    log:
        dmpdirs.LOGS / "{release}" / "buildTreatmentResponseExperiment.log",
    container:
        CONTAINER
    threads: 
        30
    resources:
        mem_mb = 50000
    script:
        dmpdirs.SCRIPTS / "R" / "buildTreatmentResponseExperiment.R"

# rule buildTreatmentResponseExperiment:
#     input:
#         sampleMetadata = dmpdirs.METADATA / "sampleMetadata.tsv",
#         treatmentMetadata = dmpdirs.METADATA / "treatmentMetadata.tsv",
#         preprocessed_raw = dmpdirs.PROCDATA / "preprocessed_TreatmentResponse_raw.csv",
#         preprocessed_profiles = dmpdirs.PROCDATA / "preprocessed_TreatmentResponse_profiles.csv",
#     output:
#         tre = dmpdirs.RESULTS / "treatmentResponseExperiment.RDS",
#     log:
#         dmpdirs.LOGS / "buildTreatmentResponseExperiment.log",
#     container:
#         CONTAINER
#     threads:
#         40
#     script:
#         dmpdirs.SCRIPTS / "R" / "buildTreatmentResponseExperiment.R"

# rule preprocessMetadata:
#     input:
#         sampleAnnotation = storage.http(config["metadata"]["sampleAnnotation"]),
#         treatmentAnnotation = storage.http(config["metadata"]["treatmentAnnotation"]),
#     output:
#         sampleMetadata = dmpdirs.METADATA / "sampleMetadata.tsv",
#         treatmentMetadata = dmpdirs.METADATA / "treatmentMetadata.tsv",
#     container:
#         CONTAINER
#     script:
#         dmpdirs.SCRIPTS / "R" / "preprocessMetadata.R"


# rule preprocessTreatmentResponse:
#     input:
#         rawdata = storage.http(config["treatmentResponse"]["rawdata"]["url"]),
#     output:
#         preprocessed_raw = dmpdirs.PROCDATA / "preprocessed_TreatmentResponse_raw.csv",
#         preprocessed_profiles = dmpdirs.PROCDATA / "preprocessed_TreatmentResponse_profiles.csv",
#     container:
#         CONTAINER
#     log:
#         dmpdirs.LOGS / "preprocessTreatmentResponse.log",
#     script:
#         dmpdirs.SCRIPTS / "R" / "preprocessTreatmentResponse.R"


# rule download_treatmentResponse_AND_metadata:
#     input:
#         lambda wc: HTTP.remote(
#             treatmentResponse[wc.release]["url"],
#         )
#     output:
#         tr = rawdata / "treatmentResponse" / "CTRPv{release}.zip" 
#     shell:
#         """
#         mv {input[0]} {output.tr}
#         """